// ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàò ÏÇ¨Ïö©)
window.CONFIG = {
    // Ïù¥ Í∞íÎì§ÏùÄ ÎπåÎìú Ïãú ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú ÎåÄÏ≤¥Îê®
    NAVER_CLIENT_ID: 'xzbnwd2h1z', // ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ IDÎßå ÌïÑÏöî
    
    // ÏßÄÎèÑ Ï¥àÍ∏∞ ÏÑ§Ï†ï
    MAP_DEFAULT_CENTER: {
        lat: 37.5665,
        lng: 126.9780
    },
    MAP_DEFAULT_ZOOM: 15,
    
    // ÏÉâÏÉÅ ÌåîÎ†àÌä∏
    COLORS: {
        red: '#FF0000',
        orange: '#FFA500',
        yellow: '#FFFF00',
        green: '#90EE90',
        blue: '#0000FF',
        black: '#000000',
        white: '#FFFFFF',
        skyblue: '#87CEEB'
    },
    
    // ÌïÑÏßÄ ÌïòÏù¥ÎùºÏù¥Ìä∏ ÏÉâÏÉÅ (Í≤ÄÏÉâ ÌïÑÏßÄÏö©)
    HIGHLIGHT_COLOR: '#9370DB',  // Î≥¥ÎùºÏÉâ (Í≤ÄÏÉâ ÌïÑÏßÄ)
    HIGHLIGHT_OPACITY: 0.7,
    CLICK_PARCEL_COLOR: '#FFFF00',  // ÎÖ∏ÎûÄÏÉâ (ÌÅ¥Î¶≠ ÌïÑÏßÄ)
    
    // LocalStorage ÌÇ§
    STORAGE_KEY: 'parcelData',
    
    // Google Sheets Apps Script URL
    GOOGLE_SHEETS_URL: 'https://script.google.com/macros/s/AKfycbxR42RFSg32RjxLzBESBK6lL1KXaCipBiVHK2Crn-GeYyyVMdqTmZGfpBwUFqlZpVxw/exec' // Ïó¨Í∏∞Ïóê Google Apps Script Î∞∞Ìè¨ URLÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî
};

// Ï†ÑÏó≠ Î≥ÄÏàò
// let map = null; // ‚ùå Ï§ëÎ≥µ ÏÑ†Ïñ∏ Ï†úÍ±∞ - map.jsÏóêÏÑú Í¥ÄÎ¶¨
// let currentColor = window.CONFIG.COLORS.red; // ‚ùå Ï§ëÎ≥µ ÏÑ†Ïñ∏ Ï†úÍ±∞ - config.jsÏóêÏÑú Í¥ÄÎ¶¨

// ÌïÑÏßÄ Î™®Îìú Í¥ÄÎ¶¨ - windowÏóê ÏßÅÏ†ë Ï†ïÏùò (üéØ ULTRATHINK: Í≤ÄÏÉâ ÌïÑÏßÄ Î≥µÏõê Ïãú Î™®Îìú Î≥¥Ï°¥)
// window.currentMode = 'click'; // Ï£ºÏÑù Ï≤òÎ¶¨ - config.jsÏóêÏÑú Í¥ÄÎ¶¨
if (typeof window.currentMode === 'undefined') {
    window.currentMode = 'click'; // Í∏∞Î≥∏Í∞íÏùÑ ÌÅ¥Î¶≠ Î™®ÎìúÎ°ú Î≥ÄÍ≤Ω (ÌïÑÏßÄ ÏÉâÏπ† Í∞ÄÎä•)
}
window.clickParcels = new Map(); // ÌÅ¥Î¶≠ÏúºÎ°ú ÏÑ†ÌÉùÌïú ÌïÑÏßÄ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
window.searchParcels = new Map(); // Í≤ÄÏÉâÏúºÎ°ú Ï∞æÏùÄ ÌïÑÏßÄ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•

// ÌïòÏúÑ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú alias
window.parcels = window.clickParcels;
window.searchResults = window.searchParcels;

let searchResultsVisible = true;
window.currentSelectedPNU = null; // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÌïÑÏßÄÏùò PNU (Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú Î≥ÄÍ≤Ω)

// ÌïÑÏßÄ ÌëúÏãú/Ïà®ÍπÄ Í¥ÄÎ†® Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
window.showClickParcels = function() {
    console.log('ÌÅ¥Î¶≠ ÌïÑÏßÄ ÌëúÏãú:', window.clickParcels.size, 'Í∞ú');
    let transparentFixCount = 0;
    
    window.clickParcels.forEach((parcel, key) => {
        if (parcel.polygon) {
            parcel.polygon.setMap(map);
            
            // üéØ ULTRATHINK: Ìà¨Î™ÖÌïú ÌïÑÏßÄ ÏûêÎèô ÏÉâÏπ† ÏàòÏ†ï
            if (parcel.color === 'transparent' || parcel.color === undefined) {
                const savedData = JSON.parse(localStorage.getItem('parcelData') || '{}');
                const savedInfo = savedData[key];
                
                if (savedInfo && savedInfo.color && savedInfo.color !== 'transparent') {
                    // Ï†ÄÏû•Îêú ÏÉâÏÉÅÏúºÎ°ú Î≥µÏõê
                    parcel.color = savedInfo.color;
                    parcel.polygon.setOptions({
                        fillColor: savedInfo.color,
                        fillOpacity: 0.7,
                        strokeColor: savedInfo.color,
                        strokeOpacity: 1.0,
                        strokeWeight: 2
                    });
                    transparentFixCount++;
                    console.log(`üé® Ìà¨Î™Ö ÌïÑÏßÄ ÏÉâÏÉÅ Î≥µÏõê: ${key} ‚Üí ${savedInfo.color}`);
                } else {
                    // Í∏∞Î≥∏ ÏÉâÏÉÅ Ï†ÅÏö© (ÎÖ∏ÎûÄÏÉâ)
                    parcel.color = '#FFFF00';
                    parcel.polygon.setOptions({
                        fillColor: '#FFFF00',
                        fillOpacity: 0.7,
                        strokeColor: '#FFFF00',
                        strokeOpacity: 1.0,
                        strokeWeight: 2
                    });
                    transparentFixCount++;
                    console.log(`üé® Ìà¨Î™Ö ÌïÑÏßÄ Í∏∞Î≥∏ ÏÉâÏÉÅ Ï†ÅÏö©: ${key} ‚Üí ÎÖ∏ÎûÄÏÉâ`);
                }
            }
        }
        if (parcel.label) parcel.label.setMap(map);
    });
    
    if (transparentFixCount > 0) {
        console.log(`‚úÖ ${transparentFixCount}Í∞ú Ìà¨Î™Ö ÌïÑÏßÄ ÏÉâÏÉÅ Î≥µÏõê ÏôÑÎ£å`);
    }
}

window.hideClickParcels = function() {
    console.log('ÌÅ¥Î¶≠ ÌïÑÏßÄ Ïà®ÍπÄ:', window.clickParcels.size, 'Í∞ú');
    window.clickParcels.forEach((parcel, key) => {
        if (parcel.polygon) parcel.polygon.setMap(null);
        if (parcel.label) parcel.label.setMap(null);
    });
}

window.showSearchParcels = function() {
    console.log('Í≤ÄÏÉâ ÌïÑÏßÄ ÌëúÏãú:', window.searchParcels.size, 'Í∞ú');
    window.searchParcels.forEach((parcel, key) => {
        if (parcel.polygon) parcel.polygon.setMap(map);
        if (parcel.label) parcel.label.setMap(map);
    });
}

window.hideSearchParcels = function() {
    console.log('Í≤ÄÏÉâ ÌïÑÏßÄ Ïà®ÍπÄ:', window.searchParcels.size, 'Í∞ú');
    window.searchParcels.forEach((parcel, key) => {
        if (parcel.polygon) parcel.polygon.setMap(null);
        if (parcel.label) parcel.label.setMap(null);
    });
}

// üéØ ULTRATHINK: Early Bootstrap - Í≤ÄÏÉâ ÌïÑÏßÄ Î≥µÏõê ÏãúÏä§ÌÖú (config-client.js)
window.earlyRestoreSearchParcels = function() {
    try {
        console.log('üöÄ ULTRATHINK Early Bootstrap: Í≤ÄÏÉâ ÌïÑÏßÄ Î≥µÏõê ÏãúÏûë (config-client.js)');
        
        // ÏùòÏ°¥ÏÑ± Ï≤¥ÌÅ¨
        if (!window.map || !window.searchParcels || typeof formatJibun !== 'function') {
            console.log('‚è≥ Early Bootstrap: ÏùòÏ°¥ÏÑ± ÎåÄÍ∏∞ Ï§ë...');
            return false;
        }
        
        // sessionStorageÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const sessionData = JSON.parse(sessionStorage.getItem('searchParcels') || '{}');
        const searchKeys = Object.keys(sessionData);
        
        if (searchKeys.length === 0) {
            console.log('üíæ Early Bootstrap: Î≥µÏõêÌï† Í≤ÄÏÉâ ÌïÑÏßÄ ÏóÜÏùå');
            return true;
        }
        
        // üéØ ULTRATHINK: Í≤ÄÏÉâ ÌïÑÏßÄÍ∞Ä ÏûàÏúºÎ©¥ Í≤ÄÏÉâ Î™®ÎìúÎ°ú Í∞ïÏ†ú ÏÑ§Ï†ï
        console.log(`üîÑ Í≤ÄÏÉâ ÌïÑÏßÄ ${searchKeys.length}Í∞ú Î∞úÍ≤¨ - Í≤ÄÏÉâ Î™®ÎìúÎ°ú Í∞ïÏ†ú Î≥ÄÍ≤Ω`);
        window.currentMode = 'search';
        
        console.log(`üü£ Early Bootstrap: ${searchKeys.length}Í∞ú Í≤ÄÏÉâ ÌïÑÏßÄ Î≥µÏõê ÏãúÏûë`);
        
        let restoredCount = 0;
        searchKeys.forEach(pnu => {
            const parcel = sessionData[pnu];
            
            if (!parcel || !parcel.geometry) {
                console.warn(`‚ö†Ô∏è Early Bootstrap: Îç∞Ïù¥ÌÑ∞ ÎàÑÎùΩ ${pnu}`);
                return;
            }
            
            try {
                // üéØ ULTRATHINK: MultiPolygon Íµ¨Ï°∞ Ï†ïÌôïÌûà Ï≤òÎ¶¨
                let coordsArray;
                if (parcel.geometry.type === 'MultiPolygon') {
                    // MultiPolygon: coordinates[0][0] (Ï≤´ Î≤àÏß∏ Ìè¥Î¶¨Í≥§Ïùò Ïô∏Í≥ΩÏÑ†)
                    coordsArray = parcel.geometry.coordinates[0][0];
                    console.log('üü£ MultiPolygon Íµ¨Ï°∞ Í∞êÏßÄ, Ï¢åÌëú Í≤ΩÎ°ú: coordinates[0][0]');
                } else if (parcel.geometry.type === 'Polygon') {
                    // Polygon: coordinates[0] (Ïô∏Í≥ΩÏÑ†)
                    coordsArray = parcel.geometry.coordinates[0];
                    console.log('üü£ Polygon Íµ¨Ï°∞ Í∞êÏßÄ, Ï¢åÌëú Í≤ΩÎ°ú: coordinates[0]');
                } else {
                    console.error('‚ùå ÏßÄÏõêÌïòÏßÄ ÏïäÎäî geometry ÌÉÄÏûÖ:', parcel.geometry.type);
                    return;
                }
                
                console.log('üî¢ Ï∂îÏ∂úÎêú Ï¢åÌëú Í∞úÏàò:', coordsArray.length);
                console.log('üî¢ Ï≤´ Î≤àÏß∏ Ï¢åÌëú ÏòàÏãú:', coordsArray[0]);
                
                // ÎÑ§Ïù¥Î≤Ñ Ï¢åÌëúÎ°ú Î≥ÄÌôò
                const coords = coordsArray.map(coord => 
                    new naver.maps.LatLng(coord[1], coord[0])  // [lng, lat] ‚Üí LatLng(lat, lng)
                );
                
                // Î≥¥ÎùºÏÉâ Ìè¥Î¶¨Í≥§ ÏÉùÏÑ±
                const polygon = new naver.maps.Polygon({
                    map: window.map,
                    paths: coords,
                    fillColor: '#9370DB',
                    fillOpacity: 0.9, // Îçî ÏßÑÌïú ÏÉâÏúºÎ°ú Î≥ÄÍ≤Ω
                    strokeColor: '#6A0DAD',
                    strokeOpacity: 1,
                    strokeWeight: 3 // ÎëêÍªò Ï¶ùÍ∞Ä
                });
                
                // ÏßÄÎ≤à ÎùºÎ≤® ÏÉùÏÑ±
                const displayText = parcel.displayText || (parcel.properties ? formatJibun(parcel.properties) : 'ÏßÄÎ≤àÎØ∏ÏÉÅ');
                let label = null;
                
                if (displayText && displayText !== 'ÏßÄÎ≤àÎØ∏ÏÉÅ') {
                    const bounds = new naver.maps.LatLngBounds();
                    coords.forEach(coord => bounds.extend(coord));
                    const center = bounds.getCenter();
                    
                    label = new naver.maps.Marker({
                        position: center,
                        map: window.map,
                        icon: {
                            content: `<div style="
                                padding: 8px 12px; 
                                background: rgba(255, 255, 255, 0.95); 
                                border: 2px solid #9370DB; 
                                border-radius: 6px; 
                                font-weight: bold; 
                                font-size: 13px; 
                                color: #6A0DAD; 
                                text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
                                box-shadow: 0 3px 8px rgba(106,13,173,0.3);
                                white-space: nowrap;
                            ">${displayText}</div>`,
                            anchor: new naver.maps.Point(0, 0)
                        }
                    });
                }
                
                // window.searchParcelsÏóê Ï†ÄÏû•
                window.searchParcels.set(pnu, {
                    pnu: pnu,
                    polygon: polygon,
                    label: label,
                    data: parcel.data,
                    displayText: displayText,
                    color: '#9370DB'
                });
                
                restoredCount++;
                console.log(`‚ú® Early Bootstrap Î≥µÏõê: ${displayText} (currentMode: ${window.currentMode})`);
                
            } catch (error) {
                console.error(`‚ùå Early Bootstrap Î≥µÏõê Ïã§Ìå®: ${pnu}`, error);
            }
        });
        
        console.log(`üü£ Early Bootstrap ÏôÑÎ£å: ${restoredCount}/${searchKeys.length}Í∞ú ÏÑ±Í≥µ - Í≤ÄÏÉâ Î™®Îìú Ïú†ÏßÄ`);
        
        // üéØ ULTRATHINK: Í≤ÄÏÉâ Î™®ÎìúÍ∞Ä OFFÎ©¥ Î≥µÏõêÎêú ÌïÑÏßÄÎì§ÎèÑ Ïà®ÍπÄ
        if (window.AppState && !window.AppState.searchMode) {
            console.log('üîç Early Bootstrap ÌõÑ Í≤ÄÏÉâ OFF ÌôïÏù∏: Î≥¥ÎùºÏÉâ ÌïÑÏßÄ Ïà®ÍπÄ');
            if (window.hideSearchParcels) {
                window.hideSearchParcels();
            }
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Early Bootstrap Ï†ÑÏ≤¥ Ïã§Ìå®:', error);
        return false;
    }
};

// Ï†ÑÏó≠ Ìï®ÏàòÎ°ú Îì±Î°ù
window.testEarlyRestore = window.earlyRestoreSearchParcels;

// üéØ ULTRATHINK: ÏûÑÏãú Ï†ÄÏû•Îêú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê Ìï®Ïàò
window.restoreTempColoredParcels = function() {
    try {
        console.log('üîÑ ÏûÑÏãú Ï†ÄÏû•Îêú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê ÏãúÏûë...');
        
        // sessionStorageÏóêÏÑú ÏûÑÏãú ÏÉâÏπ† Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const tempColorKey = 'tempColoredParcels';
        const tempData = JSON.parse(sessionStorage.getItem(tempColorKey) || '{}');
        const tempKeys = Object.keys(tempData);
        
        if (tempKeys.length === 0) {
            console.log('üíæ Î≥µÏõêÌï† ÏûÑÏãú ÏÉâÏπ† ÌïÑÏßÄ ÏóÜÏùå');
            return 0;
        }
        
        // ÏùòÏ°¥ÏÑ± Ï≤¥ÌÅ¨
        if (!window.map || !window.clickParcels || typeof createParcelPolygon !== 'function') {
            console.log('‚è≥ ÏûÑÏãú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê: ÏùòÏ°¥ÏÑ± ÎåÄÍ∏∞ Ï§ë...');
            return false;
        }
        
        console.log(`üé® ${tempKeys.length}Í∞ú ÏûÑÏãú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê ÏãúÏûë`);
        
        let restoredCount = 0;
        tempKeys.forEach(pnu => {
            const savedParcel = tempData[pnu];
            
            if (!savedParcel || !savedParcel.geometry || !savedParcel.color) {
                console.warn(`‚ö†Ô∏è ÏûÑÏãú Îç∞Ïù¥ÌÑ∞ ÎàÑÎùΩ: ${pnu}`);
                return;
            }
            
            try {
                // Ìè¥Î¶¨Í≥§ ÏÉùÏÑ±
                const polygon = createParcelPolygon(savedParcel.geometry, savedParcel.color);
                
                if (polygon) {
                    // ÏßÄÎ≤à ÎùºÎ≤® ÏÉùÏÑ±
                    let label = null;
                    if (savedParcel.jibun && savedParcel.jibun !== 'ÏßÄÎ≤àÎØ∏ÏÉÅ') {
                        const bounds = new naver.maps.LatLngBounds();
                        polygon.getPaths().getAt(0).forEach(coord => bounds.extend(coord));
                        const center = bounds.getCenter();
                        
                        label = new naver.maps.Marker({
                            position: center,
                            map: window.map,
                            icon: {
                                content: `<div style="
                                    padding: 6px 10px; 
                                    background: rgba(255, 255, 255, 0.9); 
                                    border: 2px solid ${savedParcel.color}; 
                                    border-radius: 4px; 
                                    font-weight: bold; 
                                    font-size: 12px; 
                                    color: #333; 
                                    text-shadow: 1px 1px 1px rgba(255,255,255,0.8);
                                    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
                                    white-space: nowrap;
                                ">${savedParcel.jibun}</div>`,
                                anchor: new naver.maps.Point(0, 0)
                            }
                        });
                    }
                    
                    // clickParcelsÏóê Ï†ÄÏû•
                    window.clickParcels.set(pnu, {
                        pnu: pnu,
                        polygon: polygon,
                        label: label,
                        data: savedParcel,
                        color: savedParcel.color,
                        displayText: savedParcel.jibun || 'ÏßÄÎ≤àÎØ∏ÏÉÅ',
                        properties: savedParcel.properties
                    });
                    
                    restoredCount++;
                    console.log(`üé® ÏûÑÏãú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê: ${savedParcel.jibun || pnu} (${savedParcel.color})`);
                    
                } else {
                    console.error(`‚ùå ÏûÑÏãú Ìè¥Î¶¨Í≥§ ÏÉùÏÑ± Ïã§Ìå®: ${pnu}`);
                }
                
            } catch (error) {
                console.error(`‚ùå ÏûÑÏãú ÌïÑÏßÄ Î≥µÏõê Ïã§Ìå®: ${pnu}`, error);
            }
        });
        
        console.log(`üé® ÏûÑÏãú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê ÏôÑÎ£å: ${restoredCount}/${tempKeys.length}Í∞ú ÏÑ±Í≥µ`);
        return restoredCount;
        
    } catch (error) {
        console.error('‚ùå ÏûÑÏãú ÏÉâÏπ† ÌïÑÏßÄ Î≥µÏõê Ï†ÑÏ≤¥ Ïã§Ìå®:', error);
        return false;
    }
};

